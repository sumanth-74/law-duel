1) Add the key (you did)

Put it in Replit Secrets as OPENAI_API_KEY (Replit exposes it as process.env.OPENAI_API_KEY). 
Replit Docs

2) Install the SDK

bash
Copy
Edit
npm i openai
(Official SDK + Responses API.) 
OpenAI Platform
+1

3) Create a generator function (Node/JS)

js
Copy
Edit
// generator.js
import OpenAI from "openai";
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

const MBE_SCHEMA = {
  name: "MBEItem",
  schema: {
    type: "object",
    properties: {
      id: { type: "string" },
      subject: { type: "string" },
      topic: { type: "string" },
      subtopic: { type: "string" },
      stem: { type: "string" },
      choices: { type: "array", items: { type: "string" }, minItems: 4, maxItems: 4 },
      correctIndex: { type: "integer", minimum: 0, maximum: 3 },
      optionRationales: { type: "object" },
      explanationLong: { type: "string" },
      ruleRefs: { type: "array", items: { type: "string" } },
      difficultySeed: { type: "string" },
      timeLimitSec: { type: "integer" },
      tags: { type: "array", items: { type: "string" } },
      license: { type: "string" },
      status: { type: "string" },
      authorNote: { type: "string" }
    },
    required: ["subject","topic","stem","choices","correctIndex","optionRationales",
               "explanationLong","ruleRefs","difficultySeed","license","status"],
    additionalProperties: false
  },
  strict: true
};

export async function generateMBEItem({ subject, topic, subtopic, rule }) {
  const prompt = `
Write an original MBE-style multiple-choice question for ${subject} on ${topic}/${subtopic}.
Single best answer, exactly 4 options (A–D). 120–180 word fact pattern.
Test: ${rule} under national law (FRE/FRCP/UCC Art. 2/federal con law as relevant).
Include rationales for each option and a 3–6 sentence explanation. No “all/none of the above.”
Label difficultySeed = easy|medium|hard. Output ONLY JSON for our schema.`;

  const resp = await openai.responses.create({
    model: "gpt-4o-mini",
    input: prompt,
    response_format: { type: "json_schema", json_schema: MBE_SCHEMA } // structured outputs
  });

  // Responses API convenience: get the model’s JSON text then parse
  const json = JSON.parse(resp.output_text);
  return json;
}
(Using the Responses API and Structured Outputs/JSON schema so items always come back valid JSON.) 
OpenAI Platform
+1

4) Wire it to an admin endpoint

js
Copy
Edit
// routes/admin.js
import express from "express";
import { generateMBEItem } from "../generator.js";
import { saveItem } from "../db.js"; // your insert into items table

const r = express.Router();
r.post("/bank/generate", async (req, res) => {
  const payload = req.body; // {subject, topic, subtopic, rule}
  const item = await generateMBEItem(payload);
  await saveItem({ ...item, status: "draft" });
  res.json({ ok: true, itemId: item.id });
});
export default r;
5) Basic acceptance check

Hit POST /bank/generate with { "subject":"Evidence", "topic":"Hearsay", "subtopic":"801(d)(1)(C)", "rule":"prior identification non-hearsay" }.

You get back a JSON item that matches your schema; you can insert it, review it, and push it to calibrating.